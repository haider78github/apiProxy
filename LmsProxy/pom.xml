<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
							http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  	<modelVersion>4.0.0</modelVersion>
  
  	<parent>
    	<groupId>com.softech.ls360.proxy</groupId>
    	<artifactId>LS360ProxyAPI</artifactId>
    	<version>0.0.1</version>
  	</parent>
  
  	<artifactId>LmsProxy</artifactId>
 
  	<name>LmsProxy</name>
  	<url>http://maven.apache.org</url>
  	
  	<properties>
  	   
  	   <commons-dbcp2.version>2.1.1</commons-dbcp2.version>
  	   <sqljdbc4.version>4.0</sqljdbc4.version>
  	   
	</properties>
  	
  	<dependencies>
  		
  		<dependency>
        	<groupId>com.softech.ls360.proxy</groupId>
        	<artifactId>LS360ProxyAPIUtil</artifactId>
        	<version>0.0.1</version>
        </dependency>
  		
  		<dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
        </dependency>
        
        <!-- contains the standard Log4j 2 implementation. It is the implementation you are configuring, not the API. The API 
            requires no configuration.  
        -->
       	<dependency>
	        <groupId>org.apache.logging.log4j</groupId>
	        <artifactId>log4j-core</artifactId>
        </dependency>
        
         <!-- is an adapter to support the Commons Logging API. Several libraries you can use to log against the Commons Logging API,
            and this adapter causes Commons Logging to use Log4j 2 as its implementation.  For spring logging
         -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-jcl</artifactId>
        </dependency>
        
        <dependency>
			<groupId>org.jboss.logging</groupId>
			<artifactId>jboss-logging</artifactId>
		</dependency>
		
		 <dependency>
            <groupId>javax.inject</groupId>
            <artifactId>javax.inject</artifactId>
        </dependency>
  		  
  		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-expression</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
		</dependency>
		
        <!-- Spring Data module for JPA repositories. -->
        <dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-jpa</artifactId>
		</dependency>
		
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>javax.persistence</artifactId>
        </dependency>
        
 		<!-- Hibernate entity manager with JPA 2 support. -->
        <dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
		</dependency>
		
		<!-- Javassist (JAVA programming ASSISTant) makes Java bytecode manipulation simple. It is a class library for editing 
            bytecodes in Java.  
        -->
        <dependency>
			<groupId>org.javassist</groupId>
			<artifactId>javassist</artifactId>
			 <!--  <scope>test</scope> -->
		</dependency>
		
		<!-- Hibernate Validator excludes the transient JBoss Logging API dependency(Hibernate use this instead of Commons Logging as
		    their logging API), and that a runtime JBoss Logging dependency is seperately declared. The hibernate-validator artifact
		    declares a dependency on a jboss-logging version that doesn't support Log4j2, so it is necessary to declare a newer
		    dependency that does. The exclusion isn't strictly necessary, but is shown for clarity.
		-->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
		</dependency>
		
		<dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator-annotation-processor</artifactId>
        </dependency>
        
        <!-- database -->
        <dependency>
    		<groupId>com.microsoft.sqlserver</groupId>
    		<artifactId>sqljdbc4</artifactId>
    		<version>${sqljdbc4.version}</version>
    		<scope>compile</scope>
		</dependency>
		
		<!-- Apache Commons DBCP software implements Database Connection Pooling  -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-dbcp2</artifactId>
			<version>${commons-dbcp2.version}</version>
			<scope>compile</scope>
		</dependency>
		
        <dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
		</dependency>
		
		<!-- General data-binding package for Jackson (2.x): works on streaming API (core) implementation(s) -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>
		
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jsr310</artifactId>
		</dependency>
		
  	</dependencies>
  
 	<build>
  		<finalName>${project.artifactId}</finalName>
  		<pluginManagement>
  	    	<plugins>
    			
    			<!-- Ignore/Execute plugin execution -->
    			<plugin>
        			<groupId>org.eclipse.m2e</groupId>
        			<artifactId>lifecycle-mapping</artifactId>
        			<version>1.0.0</version>
        			<configuration>
            			<lifecycleMappingMetadata>
               				 <pluginExecutions>
                    			
                    			<!-- copy-dependency plugin -->
                    			<pluginExecution>
                        			<pluginExecutionFilter>
                            			<groupId>org.apache.maven.plugins</groupId>
                            			<artifactId>maven-dependency-plugin</artifactId>
                           				<versionRange>[1.0.0,)</versionRange>
                            			<goals>
                                			<goal>copy-dependencies</goal>
                            			</goals>
                        			</pluginExecutionFilter>
                        			<action>
                            			<ignore />
                        			</action>
                    			</pluginExecution>
                			</pluginExecutions>
            			</lifecycleMappingMetadata>
        			</configuration>
    			</plugin>
   			</plugins>
  		</pluginManagement>
  		<plugins>
  		
			<!--  uses maven-dependency-plugin to copy all dependencies to "target/lms-proxy-dependency-jars/" 
			      folder, and defines the dependency classpath with maven-jar-plugin 
 			-->
 			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
		  			<execution>
						<configuration>
							<includeGroupIds>
								org.apache.logging.log4j, org.jboss.logging, javax.inject, org.springframework, wsdl4j, 
								org.eclipse.persistence, org.hibernate, org.javassist, com.microsoft.sqlserver, org.apache.commons,
								com.fasterxml.jackson.core, com.fasterxml.jackson.datatype
							</includeGroupIds>
							<outputDirectory>${project.build.directory}/lms-proxy-dependency-jars/</outputDirectory>
						</configuration>
		  			</execution>
		 		</executions>
			</plugin>
			
			<!-- To make jar file like a exe file, you need to define a manifest file and declare the application
			     entry point inside via maven-jar-plugin in pom.xml. 
			     
			     - create executable JAR with the specified mainClass
				 - exclude all .properties files located in src/main/resources from the JAR
				 - add conf folder to the manifest, providing access to it from your executable JAR
			-->
			<plugin>
  				<groupId>org.apache.maven.plugins</groupId>
  				<artifactId>maven-jar-plugin</artifactId>
  				<configuration>
					<archive>
						<manifest>
					
							<!--
                               Configures the classpath prefix. This configuration option is
                               used to specify that all needed libraries are found under Lms-Proxy-Dependency-jars/
                               directory.
                               
                               Use “classpathPrefix” to specify folder name in which all properties will be placed.
                           -->
							<classpathPrefix>lms-proxy-dependency-jars/</classpathPrefix>
							
							<!-- Specifies the main class of the application -->
							<mainClass>com.softech.ls360.lms.proxy.LmsProxy</mainClass>
						</manifest>
						
						<!-- Use “Class-Path” to specify the folder. “.” Indicate current folder, while 
						     “propertiesFiles” specifies “propertiesFiles” folder in same directory as JAR. 
						-->
						<manifestEntries>
                 			<Class-Path>lms-proxy-conf/</Class-Path>
       					 </manifestEntries> 
					</archive>
  				</configuration>
 			</plugin>
 			
 			<!-- copy all .properties, .xml and .vm files located in src/main/resources into a conf folder in your project root. Note that this 
 			     step is an optional convenience for your users of the JAR. You can require the explicitly create this file in the 
 			     conf directory. This conf directory is effectively added to your runtime classpath via the manifest. 
 			-->
 			<plugin>
  				<groupId>org.apache.maven.plugins</groupId>
  				<artifactId>maven-resources-plugin</artifactId>
  				<executions>
    				<execution>
      					<configuration>
        					<outputDirectory>${basedir}/target/lms-proxy-conf</outputDirectory>
      					</configuration>
    				</execution>
  				</executions>
			</plugin>			 		
  		</plugins>
  	</build>
  
</project>
